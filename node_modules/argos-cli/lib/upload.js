'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadError = undefined;

let upload = (() => {
  var _ref = _asyncToGenerator(function* (options) {
    const {
      directory,
      ignore = [],
      token: tokenOption,
      branch: branchOption,
      commit: commitOption
    } = options;

    const token = tokenOption || _config2.default.get('token');
    let environment = {};

    if (process.env.ARGOS_CLI_TEST !== 'true') {
      environment = (0, _getEnvironment2.default)(process.env);
    }
    const branch = branchOption || _config2.default.get('branch') || environment.branch;
    const commit = commitOption || _config2.default.get('commit') || environment.commit;

    if (environment.ci) {
      (0, _display.displayInfo)(`identified \`${environment.ci}\` environment`);
    }

    if (!token) {
      throw new UploadError('Token missing: use ARGOS_TOKEN or the --token option.');
    }

    if (!branch) {
      throw new UploadError('Branch missing: use ARGOS_BRANCH or the --branch option.');
    }

    if (!commit) {
      throw new UploadError('Commit missing: use ARGOS_COMMIT or the --commit option.');
    }

    if (!(yield (0, _isDirectory2.default)(directory))) {
      throw new UploadError('The path provided is not a directory.');
    }

    if (!(yield (0, _isReadable2.default)(directory))) {
      throw new UploadError('The path provided is not a readable, please check fs rights.');
    }

    (0, _display.displayInfo)(`using \`${branch}\` as branch`);
    (0, _display.displayInfo)(`using \`${commit}\` as commit`);

    const screenshots = yield (0, _readScreenshots2.default)({ cwd: directory, ignore });

    if (screenshots.length === 0) {
      throw new UploadError(`The path provided doesn't contain any image (${_readScreenshots.GLOB_PATTERN}).`);
    }

    (0, _display.displayInfo)(`found ${screenshots.length} screenshots to upload`);

    const body = new _formData2.default();
    body.append('data', JSON.stringify({
      branch,
      commit,
      token,
      names: screenshots.map(function (screenshot) {
        return screenshot.name;
      })
    }));

    screenshots.reduce(function (body, screenshot) {
      body.append('screenshots[]', _fs2.default.createReadStream(screenshot.filename));
      return body;
    }, body);

    return (0, _nodeFetch2.default)(`${_config2.default.get('endpoint')}/builds`, {
      headers: {
        'X-Argos-CLI-Version': _package2.default.version
      },
      method: 'POST',
      body
    });
  });

  return function upload(_x) {
    return _ref.apply(this, arguments);
  };
})();

var _fs = require('mz/fs');

var _fs2 = _interopRequireDefault(_fs);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _isDirectory = require('./isDirectory');

var _isDirectory2 = _interopRequireDefault(_isDirectory);

var _isReadable = require('./isReadable');

var _isReadable2 = _interopRequireDefault(_isReadable);

var _readScreenshots = require('./readScreenshots');

var _readScreenshots2 = _interopRequireDefault(_readScreenshots);

var _getEnvironment = require('./getEnvironment');

var _getEnvironment2 = _interopRequireDefault(_getEnvironment);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _display = require('./display');

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class UploadError extends Error {}

exports.UploadError = UploadError;
exports.default = upload;