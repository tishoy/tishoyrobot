'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _updateNotifier = require('update-notifier');

var _updateNotifier2 = _interopRequireDefault(_updateNotifier);

var _errorReporter = require('./errorReporter');

var _errorReporter2 = _interopRequireDefault(_errorReporter);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _upload = require('./upload');

var _upload2 = _interopRequireDefault(_upload);

var _display = require('./display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* eslint-disable no-console */

(0, _updateNotifier2.default)({ pkg: _package2.default }).notify();
(0, _errorReporter.initializeErrorReporter)();

if (process.env.NODE_ENV !== 'production') {
  process.on('exit', code => {
    console.info(`exit code: ${code}`);
  });
}

const list = value => value.split(',');

_commander2.default.version(_package2.default.version).command('upload <directory>').description('Upload screenshots').option('-C, --commit <commit>', 'Git commit').option('-B, --branch <branch>', 'Git branch').option('-T, --token <token>', 'Repository token').option('--ignore <list>', 'List of glob files to ignore (ex: "**/*.png,**/diff.jpg")', list).action((() => {
  var _ref = _asyncToGenerator(function* (directory, command) {
    console.log(`=== argos-cli: uploading '${directory}' directory...\n`);

    let json;

    try {
      const res = yield (0, _upload2.default)(_extends({
        directory
      }, command));
      json = yield res.json();

      if (json.error) {
        throw new _upload.UploadError(json.error.message);
      }
    } catch (error) {
      (0, _display.displayError)('Sorry an error happened:');

      if (error instanceof _upload.UploadError) {
        console.error(_chalk2.default.bold.red(error.message));
      } else {
        _errorReporter2.default.captureException(error);
        console.error(_chalk2.default.bold.red(error.message));
        console.error(_chalk2.default.bold.red(error.stack));
      }

      process.exit(1);
    }

    (0, _display.displaySuccess)('Upload complete!');
    console.log(_chalk2.default.green(`build created id: ${json.build.id}`));
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})());

if (!process.argv.slice(2).length) {
  _commander2.default.outputHelp();
} else {
  _commander2.default.parse(process.argv);
}